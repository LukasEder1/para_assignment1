
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSASSIGN DIVIDE GE GEQ ID LCURL LE LEQ LPAREN MINUS NUMBER PLUS RCURL RPAREN SEQ TIMES VAR else if input skip whilestatement : expressionstatement : condstatement : commandcommand : skipcommand : command SEQ commandcommand : VAR ASSIGN expressioncommand : input LPAREN VAR RPARENcommand : if cond LCURL command RCURL else LCURL command RCURLcommand : while cond LCURL command RCURL\n    cond : LPAREN VAR binaryREL NUMBER RPAREN\n    binaryREL : LEQ\n                | LE\n                | GE\n                | GEQexpression : NUMBER\n    expression : VAR\n    expression : MINUS expression %prec UMINUSexpression : expression binaryOP expressionbinaryOP : PLUS\n                | MINUS\n                | TIMES'
    
_lr_action_items = {'NUMBER':([0,7,13,14,15,16,18,29,30,31,32,33,],[5,5,5,-19,-20,-21,5,37,-11,-12,-13,-14,]),'VAR':([0,7,8,13,14,15,16,17,18,22,35,36,45,],[6,20,21,20,-19,-20,-21,27,20,34,27,27,27,]),'MINUS':([0,2,5,6,7,13,14,15,16,18,19,20,25,28,],[7,15,-15,-16,7,7,-19,-20,-21,7,-17,-16,15,15,]),'LPAREN':([0,10,11,12,],[8,22,8,8,]),'skip':([0,17,35,36,45,],[9,9,9,9,9,]),'input':([0,17,35,36,45,],[10,10,10,10,10,]),'if':([0,17,35,36,45,],[11,11,11,11,11,]),'while':([0,17,35,36,45,],[12,12,12,12,12,]),'$end':([1,2,3,4,5,6,9,19,20,25,26,28,38,41,43,47,],[0,-1,-2,-3,-15,-16,-4,-17,-16,-18,-5,-6,-7,-10,-9,-8,]),'PLUS':([2,5,6,19,20,25,28,],[14,-15,-16,-17,-16,14,14,]),'TIMES':([2,5,6,19,20,25,28,],[16,-15,-16,-17,-16,16,16,]),'SEQ':([4,5,9,19,20,25,26,28,38,39,40,43,46,47,],[17,-15,-4,-17,-16,-18,17,-6,-7,17,17,-9,17,-8,]),'RCURL':([5,9,19,20,25,26,28,38,39,40,43,46,47,],[-15,-4,-17,-16,-18,-5,-6,-7,42,43,-9,47,-8,]),'ASSIGN':([6,27,],[18,18,]),'LEQ':([21,],[30,]),'LE':([21,],[31,]),'GE':([21,],[32,]),'GEQ':([21,],[33,]),'LCURL':([23,24,41,44,],[35,36,-10,45,]),'RPAREN':([34,37,],[38,41,]),'else':([42,],[44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,7,13,18,],[2,19,25,28,]),'cond':([0,11,12,],[3,23,24,]),'command':([0,17,35,36,45,],[4,26,39,40,46,]),'binaryOP':([2,19,25,28,],[13,13,13,13,]),'binaryREL':([21,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_stmt_expr','CustomParser.py',98),
  ('statement -> cond','statement',1,'p_stmt_cond','CustomParser.py',102),
  ('statement -> command','statement',1,'p_stmt_command','CustomParser.py',106),
  ('command -> skip','command',1,'p_command_skip','CustomParser.py',111),
  ('command -> command SEQ command','command',3,'p_command_seq','CustomParser.py',115),
  ('command -> VAR ASSIGN expression','command',3,'p_command_assign','CustomParser.py',119),
  ('command -> input LPAREN VAR RPAREN','command',4,'p_command_input','CustomParser.py',123),
  ('command -> if cond LCURL command RCURL else LCURL command RCURL','command',9,'p_command_if','CustomParser.py',127),
  ('command -> while cond LCURL command RCURL','command',5,'p_command_while','CustomParser.py',131),
  ('cond -> LPAREN VAR binaryREL NUMBER RPAREN','cond',5,'p_cond','CustomParser.py',137),
  ('binaryREL -> LEQ','binaryREL',1,'p_binary_relation','CustomParser.py',142),
  ('binaryREL -> LE','binaryREL',1,'p_binary_relation','CustomParser.py',143),
  ('binaryREL -> GE','binaryREL',1,'p_binary_relation','CustomParser.py',144),
  ('binaryREL -> GEQ','binaryREL',1,'p_binary_relation','CustomParser.py',145),
  ('expression -> NUMBER','expression',1,'p_expression_number','CustomParser.py',150),
  ('expression -> VAR','expression',1,'p_expression_var','CustomParser.py',155),
  ('expression -> MINUS expression','expression',2,'p_expression_neg','CustomParser.py',160),
  ('expression -> expression binaryOP expression','expression',3,'p_expression','CustomParser.py',164),
  ('binaryOP -> PLUS','binaryOP',1,'p_binary_operator','CustomParser.py',169),
  ('binaryOP -> MINUS','binaryOP',1,'p_binary_operator','CustomParser.py',170),
  ('binaryOP -> TIMES','binaryOP',1,'p_binary_operator','CustomParser.py',171),
]
